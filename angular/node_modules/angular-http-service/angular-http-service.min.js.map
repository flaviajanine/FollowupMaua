{"version":3,"sources":["angular-http-service.js"],"names":["window","angular","undefined","module","constant","OPTIONS","GET","POST","PUT","DELETE","HEAD","TRACE","CONNECT","service","$http","$q","HttpOptions","HttpMethod","handleRequest","method","url","withCredentials","parameters","options","req","httpOptions","forEach","option","key","value","then","_handleSuccess","_handleError","response","reject","HttpService","factory","HttpOption","data","passedOptions","transformRequest","addHttpOption","header","headerValues","_haveHttpOption","HEADERS","_findHttpOption","headers","i","push","_processPassedOptions","result","length","filter","obj"],"mappings":"CAAA,SAAUA,OAAQC,QAASC,WAAY,YACnCD,SAAQE,OAAO,mBAEdC,SAAS,cACNC,QAAS,UACTC,IAAK,MACLC,KAAM,OACNC,IAAK,MACLC,OAAQ,SACRC,KAAM,OACNC,MAAO,QACPC,QAAS,YAGZC,QAAQ,eAAgB,QAAS,KAAM,cAAe,aAAc,SAASC,MAAOC,GAAIC,YAAaC,YAsBlG,QAASC,eAAcC,OAAQC,IAAKC,gBAAiBC,WAAYC,SAC7D,GAAIC,MACAL,OAAQA,OACRC,IAAKA,IACLC,gBAAiBA,gBAgBrB,OAZAA,iBAA6C,mBAApBA,kBAAkCA,gBAEvDC,aACAE,IAAY,OAAIF,YAGhBC,SACAA,QAAQE,YAAYC,QAAQ,SAASC,QACjCH,IAAIG,OAAOC,KAAOD,OAAOE,QAI1Bf,MAAMU,KAAKM,KAAKC,eAAgBC,cAG3C,QAASA,cAAaC,UAClB,MAAOlB,IAAGmB,OAAOD,UAGrB,QAASF,gBAAeE,UACpB,MAAOA,UA/CX,GAAIE,cACA7B,IAAKW,WAAWX,IAChBC,KAAMU,WAAWV,KACjBC,IAAKS,WAAWT,IAChBC,OAAQQ,WAAWR,OACnBS,cAAeA,cAGnB,OAAOiB,gBAkDVC,QAAQ,aAAc,WACnB,GAAIC,YAAa,SAASC,MAGtB,GAAID,aACAT,IAAKU,KAAKV,IACVC,MAAOS,KAAKT,MAGhB,OAAOQ,YAGX,OAAOA,cASVD,QAAQ,eAAgB,aAAc,SAASC,YAC5C,GAAIrB,aAAc,SAASuB,eAwBvB,QAASC,kBAAiBX,OACtBY,cAAc,mBAAoBZ,OAQtC,QAASS,MAAKT,OACVY,cAAc,OAAQZ,OAS1B,QAASa,QAAOd,IAAKC,OACjB,GAAIc,aACAC,iBAAgBC,UAChBF,aAAeG,gBAAgBD,SAAS,GACxCF,aAAaf,KAAOC,OAEpBc,cAAgBf,IAAKC,OAGzBkB,QAAQJ,cAQZ,QAASI,SAAQlB,OACbY,cAAcI,QAAShB,OAS3B,QAASY,eAAcb,IAAKC,OACxB,GAAIe,gBAAgBhB,MAChB,IAAK,GAAIoB,KAAKzB,SACV,GAAIA,QAAQyB,GAAGpB,MAAQA,IAAK,CACxBL,QAAQyB,GAAGnB,MAAQA,KACnB,YAIRN,SAAQ0B,KAAK,GAAIZ,aACbT,IAAKA,IACLC,MAAOA,SAKnB,QAASqB,uBAAsBX,eACC,mBAAjBA,iBACsC,mBAAlCA,eAAcC,kBACrBA,iBAAiBD,cAAcC,kBAG/BD,cAAcD,MACdA,KAAKC,cAAcD,MAGnBC,cAAcQ,SACdA,QAAQR,cAAcQ,UAKlC,QAASH,iBAAgBhB,KACrB,GAAIuB,QAASL,gBAAgBlB,IAC7B,OAAOuB,QAAOC,OAAS,EAG3B,QAASN,iBAAgBlB,KACrB,MAAOL,SAAQ8B,OAAO,SAASC,KAC3B,MAAOA,KAAI1B,MAAQA,MA5G3B,GAAIL,YACAsB,QAAU,SACdK,uBAAsBX,cAItB,IAAIvB,cACAS,YAAaF,QACbiB,iBAAkBA,iBAClBF,KAAMA,KACNS,QAASA,QACTL,OAAQA,OAGZ,OAAO1B,aAmGX,OAAOA,iBAEZhB,OAAQA,OAAOC","file":"angular-http-service.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\r\n    angular.module('service.http', [])\r\n\r\n    .constant('HttpMethod', {\r\n        OPTIONS: 'options',\r\n        GET: 'get',\r\n        POST: 'post',\r\n        PUT: 'put',\r\n        DELETE: 'delete',\r\n        HEAD: 'head',\r\n        TRACE: 'trace',\r\n        CONNECT: 'connect'\r\n    })\r\n\r\n    .service('HttpService', [\"$http\", \"$q\", \"HttpOptions\", \"HttpMethod\", function($http, $q, HttpOptions, HttpMethod) {\r\n        // Service\r\n        \r\n        var HttpService = {\r\n            GET: HttpMethod.GET,\r\n            POST: HttpMethod.POST,\r\n            PUT: HttpMethod.PUT,\r\n            DELETE: HttpMethod.DELETE,\r\n            handleRequest: handleRequest\r\n        };\r\n        \r\n        return HttpService;\r\n    \r\n        /**\r\n         * Handles a http/s request\r\n         * @param {string} method of http request\r\n         * @param {string} url used to make the request\r\n         * @param {boolean} [withCredentials=false] indicates if cookies should be passed with the request\r\n         * @param {Object} [parameters] for the request, e.g. {\"name\": \"Imagus\", \"address\": \"139 Sandgate Road\"}\r\n         * @param {HttpOption[]} [options] for the request\r\n         * @return {Promise.Object} the result of the request\r\n         */\r\n        function handleRequest(method, url, withCredentials, parameters, options) {\r\n            var req = {\r\n                method: method,\r\n                url: url,\r\n                withCredentials: withCredentials\r\n            };\r\n            \r\n            // if not found, default withCredentials to false\r\n            withCredentials = typeof withCredentials !== 'undefined' ? withCredentials : false;\r\n    \r\n            if (parameters) {\r\n                req['params'] = parameters;\r\n            }\r\n    \r\n            if (options) {\r\n                options.httpOptions.forEach(function(option) {\r\n                    req[option.key] = option.value;\r\n                });\r\n            }\r\n    \r\n            return $http(req).then(_handleSuccess, _handleError);\r\n        }\r\n    \r\n        function _handleError(response) {\r\n            return $q.reject(response);\r\n        }\r\n    \r\n        function _handleSuccess(response) {\r\n            return response;\r\n        };\r\n    }])\r\n    \r\n    /**\r\n     * A http/s option\r\n     * @typedef HttpOption\r\n     * @type {Object}\r\n     * @property {string} key is the key for the option\r\n     * @property {Object} value is the value for the option\r\n     */\r\n    .factory('HttpOption', function() {\r\n        var HttpOption = function(data) {\r\n            // Factory\r\n            \r\n            var HttpOption = {\r\n                key: data.key,\r\n                value: data.value\r\n            };\r\n            \r\n            return HttpOption;\r\n        };\r\n        \r\n        return HttpOption;\r\n    })\r\n    \r\n    /**\r\n     * A collection of http/s option\r\n     * @typedef HttpOptions\r\n     * @type {object}\r\n     * @property {HttpOption[]} httpOptions is the collection of options\r\n     */\r\n    .factory('HttpOptions', [\"HttpOption\", function(HttpOption) {\r\n        var HttpOptions = function(passedOptions) {\r\n            var options = [];\r\n            var HEADERS = \"headers\";\r\n            _processPassedOptions(passedOptions);\r\n            \r\n            // Factory\r\n            \r\n            var HttpOptions = {\r\n                httpOptions: options,\r\n                transformRequest: transformRequest,\r\n                data: data,\r\n                headers: headers,\r\n                header: header\r\n            };\r\n            \r\n            return HttpOptions;\r\n            \r\n            // Implementation\r\n            \r\n            /**\r\n             * Adds a 'transformRequest' header\r\n             * @memberof HttpOptions\r\n             * @param {Object} value is the value\r\n             */\r\n            function transformRequest(value) {\r\n                addHttpOption(\"transformRequest\", value);\r\n            }\r\n            \r\n            /**\r\n             * Adds a data body\r\n             * @memberof HttpOptions\r\n             * @param {Object} value is the value\r\n             */\r\n            function data(value) {\r\n                addHttpOption(\"data\", value);\r\n            }\r\n            \r\n            /**\r\n             * Adds a header\r\n             * @memberof HttpOptions\r\n             * @param {string} key the header type\r\n             * @param {Object} value the header value\r\n             */\r\n            function header(key, value) {\r\n                var headerValues;\r\n                if (_haveHttpOption(HEADERS)) {\r\n                    headerValues = _findHttpOption(HEADERS)[0];\r\n                    headerValues[key] = value;\r\n                } else {\r\n                    headerValues = {key: value};\r\n                }\r\n                \r\n                headers(headerValues);\r\n            }\r\n            \r\n            /**\r\n             * Adds multiple headers\r\n             * @memberof HttpOptions\r\n             * @param {Object} value the headers values\r\n             */\r\n            function headers(value) {\r\n                addHttpOption(HEADERS, value);\r\n            }\r\n            \r\n            /**\r\n             * Adds a http option\r\n             * @memberof HttpOptions\r\n             * @param {string} key the name of the http option\r\n             * @param {Object} value the value for the http option\r\n             */\r\n            function addHttpOption(key, value) {\r\n                if (_haveHttpOption(key)) {\r\n                    for (var i in options) {\r\n                        if (options[i].key === key) {\r\n                            options[i].value = value;\r\n                            break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    options.push(new HttpOption({\r\n                        key: key,\r\n                        value: value\r\n                    }));\r\n                }\r\n            }\r\n            \r\n            function _processPassedOptions(passedOptions) {\r\n                if (typeof passedOptions != 'undefined') {\r\n                    if (typeof passedOptions.transformRequest != 'undefined') {\r\n                        transformRequest(passedOptions.transformRequest);\r\n                    }\r\n                    \r\n                    if (passedOptions.data) {       \r\n                        data(passedOptions.data);\r\n                    }\r\n                    \r\n                    if (passedOptions.headers) {\r\n                        headers(passedOptions.headers)\r\n                    }\r\n                }\r\n            }\r\n            \r\n            function _haveHttpOption(key) {                \r\n                var result = _findHttpOption(key);\r\n                return result.length > 0;\r\n            }\r\n            \r\n            function _findHttpOption(key) {\r\n                return options.filter(function(obj) {\r\n                    return obj.key === key;\r\n                });\r\n            }\r\n        };\r\n        \r\n        return HttpOptions;\r\n    }]);\r\n})(window, window.angular);"]}